<h2 id='accordion'>Accordion</h2><div class="highlight"><pre class="highlight plaintext"><code>struct ContentView: View {
    let data = [
        JetAccordionItem(title: "Header 1", content: "Lorem ipsum ..."),
        JetAccordionItem(title: "Header 2", content: "Lorem ipsum ...")
    ]
    @State var expandedViewIdx: Int? = 0
    var body: some View {
        VStack {
            JetAccordion(data: data)
            Spacer()
            HStack {
                Button(action: {
                    expandedViewIdx = 0
                }){
                    Text("Open 1st")
                }
                Button(action: {
                    expandedViewIdx = 1
                }){
                    Text("Open 2nd")
                }
                Button(action: {
                    expandedViewIdx = nil
                }, label: {
                    Text("Close")
                })
            }
        }
        .padding()
    }
}
</code></pre></div>
<p>Accordion is used to show and hide content. Collapsed element will animate the height from 0 to its original height.
<p align="center">
    <img src="/images/Accordion-f6edca00.webp" alt="" />
</p></p>
<h3 id='api'>API</h3><h3 id='jetaccordion'>JetAccordion</h3>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>data</td>
<td>Array of items to display in accordion format</td>
<td>[JetAccordionItem]</td>
<td>-</td>
</tr>
<tr>
<td>expandedViewIdx (optional)</td>
<td>Index of the expanded view, all items are collapsed when expandedViewIdx == nil</td>
<td>Binding&lt;Int?&gt;</td>
<td>nil</td>
</tr>
<tr>
<td>header (optional)</td>
<td>View that will be displayed instead of default header.</td>
<td>(item: JetAccordionItem, isExpanded: Bool) -&gt; View</td>
<td>EmptyView()</td>
</tr>
<tr>
<td>body (optional)</td>
<td>View that will be displayed instead of default body.</td>
<td>(item: JetAccordionItem, isExpanded: Bool) -&gt; View</td>
<td>EmptyView()</td>
</tr>
</tbody></table>
<div class="highlight"><pre class="highlight plaintext"><code>let data = [
        JetAccordionItem(title: "Header 1", content: "Lorem ipsum ..."),
        JetAccordionItem(title: "Header 2", content: "Lorem ipsum ...")
]
JetAccordion(data: data)
</code></pre></div><h3 id='jetaccordionitem'>JetAccordionItem</h3>
<table><thead>
<tr>
<th>Property</th>
<th>Description</th>
<th>Type</th>
<th>Default</th>
</tr>
</thead><tbody>
<tr>
<td>title</td>
<td>Text that will be displayed in JetAccordion header</td>
<td>String</td>
<td>-</td>
</tr>
<tr>
<td>content</td>
<td>Text that will be displayed in JetAccordion body</td>
<td>String</td>
<td>-</td>
</tr>
</tbody></table>
